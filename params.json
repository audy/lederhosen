{"note":"Don't delete this file! It's used internally to help with page regeneration.","body":"## Who should use Lederhosen?\r\n\r\nPeople who have paired-end Illumina 16S rRNA amplicons who, for some reason, don't want to use QIIME.\r\n\r\n## Who can use Lederhosen?\r\n\r\nLederhosen is free and open source under the [MIT open source license](http://opensource.org/licenses/mit-license.php/)\r\n\r\n## How do I get Lederhosen?\r\n\r\n0. Obtain & Install [UCLUST](http://www.drive5.com/) (64-bit)\r\n1. Obtain & Install [BLAT](http://genome.ucsc.edu/FAQ/FAQblat.html#blat3)\r\n2. Get a copy of [TaxCollector](http://github.com/audy/taxcollector)\r\n3. Install Lederhosen by typing:\r\n\r\n    `sudo gem install lederhosen`\r\n4. Check installation by typing `lederhosen`. You should see some help text.\r\n\r\n## Features\r\n\r\n- Sequence trimming (paired-end Illumina).\r\n- K-mer filtering.\r\n- Clustering w/ UCLUST.\r\n- UCLUST output filtering.\r\n- Separation of representative reads.\r\n- Separation of all reads belonging to each cluster.\r\n- Identification of clusters using TaxCollector.\r\n- Generation of OTU abundancy matrices.\r\n\r\n## How do I use Lederhosen?\r\n\r\nLederhosen is just a convenient wrapper for UCLUST and BLAT with some scripts for quality filtering, de-noising of data as well as creation of nice tables. It is similar to QIIME but meant for paired-end Illumina data rather than single-end 454. The basic lederhosen pipeline consists of: trimming, joining, sorting, filtering, clustering, more filtering, and output generation (OTU tables, representative reads, reads by cluster, and taxonomic descriptions for clusters). See the example pipeline in `pipeline.sh`.\r\n\r\n## Tasks\r\n\r\nLederhosen is invoked by typing `lederhosen [TASK]`\r\n\r\n### trim\r\n\r\nTrim (Illumina) reads using quality scores. Output will be a directory of fasta files. Reads can optionally be gzipped.\r\n\r\n    lederhosen trim --reads_dir=reads/*.txt --out_dir=trimmed/\r\n\r\n### join\r\n\r\nJoin paired reads from all samples end-to-end. This method enables the use of uclust with paired-end data. Output will be a single fasta file.\r\n\r\n    lederhosen join --trimmed=trimmed/*.fasta --output=joined.fasta\r\n\r\nIf your reads are not paired, then you do not need to do this step. Instead, concatenate all of the trimmed reads files.\r\n\r\n    cat trimmed/*.fasta > joined.fasta\r\n\r\n### sort\r\n\r\nSort reads by length. This is a requirement for uclust's single-linkage clustering algorithim.\r\n\r\n    lederhosen sort --input=joined.fasta --output=sorted.fasta\r\n\r\n### k_filter\r\n\r\nK-mer abundance noise filtering. This step is experimental and optional. It may reduce the time it takes to perform the clustering.\r\n\r\n    lederhosen k_filter --input=joined.fasta --output=filtered.fasta --k=10 --cutoff=50\r\n\r\n### cluster\r\n\r\nCluster reads using UCLUST. Output is a uc file.\r\n\r\n    lederhosen cluster --input=sorted.fasta --identity=0.80 --output=clusters.uc\r\n\r\n### uc_filter\r\n\r\nFilter UC file removing singleton clusters or clusters that are only present in a few samples. This greatly reduces the noise of the data without removing many of the reads.\r\n\r\n    lederhosen uc_filter --input=clusters.uc --output=clusters.uc.filtered --reads=50 --samples=10\r\n\r\n### otu_table\r\n\r\nCreate an OTU abundance table where rows are samples and columns are clusters. The entries are the number of reads for that cluster in a sample.\r\n\r\n    lederhosen otu_table --clusters=clusters.uc --output=otu_prefix.csv\r\n\r\n### rep_reads\r\n\r\nGet representative reads for each cluster. Output is a single fasta file.\r\n\r\n    lederhosen rep_reads --clusters=clusters.uc --joined=joined.fasta --output=representative_reads.fasta\r\n\r\n### split\r\n\r\nGet all reads belonging to each cluster. Output is a directory containing a fasta file for each cluster. The fasta file contains the joined reads.\r\n\r\n    lederhosen split --clusters=clusters.uc --reads=joined.fasta --min-clst-size=100\r\n\r\n### name\r\n\r\nIdentify clusters in a database using the representative reads. This is a simple wrapper for BLAT. The output is a tab-delimited file similar to a BLAST output file. For this step you need to have BLAT installed and also a [TaxCollector](http://github.com/audy/taxcollector) database.\r\n\r\n    lederhosen name --reps=representative_reads.fasta --database taxcollector.fa --output blast_like_output.txt\r\n\r\n### add_names\r\n\r\nAdd phylogenetic classification of clusters to OTU abundance file.\r\n\r\n\tlederhosen add_names --blat=blat_output.txt --level=taxonomic_level --table=otu_file.csv --output=named_out_file.csv\r\n\r\nWhere `taxonomic_level` can be: kingdom, domain, phylum, class, order, family, genus or species. This method only works with a TaxCollector database.\r\n\r\n### squish\r\n\r\nSquish an OTU abundance file by column name (phylogenetic description)\r\n\r\n\tlederhosen squish --csv-file=named_out_file.csv --output=squished_named_out_file.csv\r\n","tagline":"Cluster raw Illumina 16S rRNA amplicon data to generate OTUs.","google":"","name":"Lederhosen"}